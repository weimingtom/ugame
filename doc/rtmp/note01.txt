一、NetConnection.call轮询过程
取自Red5的echo_test例子（RTMP AMF0 Object）
注意，下面的客户端发包称为Cn包（n为整数），
服务器发包称为Sn包（n为整数）。
粘包的意思是，在嗅探器拦截内容里，
数据是合并在一起发送的，
一般是由Flash播放器（客户端）发出。
左面的客户端是Flash Player调试版（非浏览器的独立exe）。
右面的服务器是RED5服务器。
测试的操作系统是Windows XP。

---------------------------------------------
   Client->Server         Server->Client
---------------------------------------------
1. C0握手包，长度0x601    S0握手包，长度0xC01
   首字节0x03             首字节0x03
---------------------------------------------
2. C1握手包，长度0x600
   首字节随机
---------------------------------------------
3. connect包（粘包）
   含AMF0数据      
   首字节0x03              
   
   子包（粘包）
   首字节0xC3              首字节0x02
---------------------------------------------
4. 首字节0x02              首字节0x42

                           _result包
                           首字节0x03  
                           
                           首字节0x42
---------------------------------------------
5. call包 
   含AMF0数据              含AMF0数据
   首字节0x03              首字节0x43
---------------------------------------------
6. call包
   含AMF0数据              含AMF0数据
   首字节0x43              首字节0x43
---------------------------------------------

二、模型描述：
(1) 握手过程中，C0包长度0x601，首字节0x03，
S0包可以是随机内容的，
但需要保证首字节为0x03，长度为0xC01
(2) connect包和C1包内容粘起来
(3) AMF0数据中可能混有0xC?内容的字节（用于分割过长的数据），
出现在connect包的偏移位置0x8C处（内容为0xC3），
应该是为了保证AMF包包体长度总小于等于0x80。
(4) 客户端RTMP包首字节和包体长度
首字节决定包头长度。上面提到的客户端包的首字节有以下情况：
	* C0握手包的0x03：无包头，
		包体长度0x600
	* 非C0握手包的0x03：包头大小12，
		包体长度小于0x80，可能有0xC3的分割。
	* 随机内容：C1握手包。没有包头，
		包体长度0x601
	* 0xC3：包头大小1，用于表示connect包的子包，
		包体长度小于0x80，由前面的AMF包包头中的长度信息计算得到。
	* 0x02：包头大小12，
		包体长度小于0x80，可能有0xC3的分割。
	* 0x43：包头大小8
		包体长度小于0x80，可能有0xC3的分割。
(5)RTMP包首字节结构，长度1 Byte
	* 包头长度(2bit) | 频道ID(6bit)
	其中包头长度的计算包括首字节在内
(6)RTMP包头结构（包含首字节）（下面的B表示Byte字节数）
	* 包头长度1 Byte：
		首字节(1B)
	* 包头长度8 Bytes：
		首字节(1B) | 时间戳(3B) | 包体总长(3B) | 包类型(1B)
	* 包头长度12 Bytes：
		首字节(1B) | 时间戳(3B) | 包体总长(3B) | 包类型(1B) | 流ID(4B)
(7)服务器RTMP包首字节和包体长度
	* S0包长度0xC01，首字节0x03
	* call包的响应总返回0x43首字节


三、RTMP协议过程的参考资料：
1. rtmp握手Java版附源码
http://bbs.9ria.com/thread-10560-1-1.html
2. RTMP协议封包分析 参考red5
http://www.cnweblog.com/fly2700/archive/2008/04/09/281431.html
3. RTMP英文介绍
http://wiki.gnashdev.org/RTMP
4. AMF英文介绍
http://wiki.gnashdev.org/AMF
5. RTMP协议的颜色高亮对照解析
http://tlb.org/rtmpout.html

四、connect包的分析，以及AMF0的手工解包
注意，开头注释部分不属于AMF0，不能用AMF0的协议分析（只能用RTMP）
而后面的AMF0数据不能直接用AMF0解码器解码，
因为里面夹杂了一个0xC3的字节，它是用来表示前面的部分已经超过128字节
（从0x02开始算起？），需要插入分割标志。
如果要用
flex.messaging.io.amf.Amf0Input
这个类解码，需要想办法去掉这个标志字节。

	/*
	    0x03,
	    //12字节长头部（包括这个字节），ChannelID为3（即Invoke通道）
            //
            //00	12 bytes  0?
	    //01	8 bytes   4?
	    //10	4 bytes   8?
	    //11	1 byte    C?
            //
            //ChannelID	Use
            //02	Ping 和ByteRead通道
            //03	Invoke通道 我们的connect() publish()和自字写的NetConnection.Call() 数据都是在这个通道的
            //04	Audio和Vidio通道
            //05 06 07	服务器保留,经观察FMS2用这些Channel也用来发送音频或视频数据

	    0x00, 0x00, 0x00,
	    //时间戳
	    
	    0x00, 0x00, (byte) 0xE4, 
	    //总长度（如果超过0x80或128就分割，头部加上0xC?字节（不计入总长度）
	    
	    0x14, 
	    //AMF类型（即Invoke） 0x01-0x06的介绍见Page 31
            //0x01	Chunk Size	changes the chunk size for packets
            //0x02	Unknown	
            //0x03	Bytes Read	send every x bytes read by both sides
            //0x04	Ping	ping is a stream control message, has subtypes
            //0x05	Server BW	the servers downstream bw
            //0x06	Client BW	the clients upstream bw 
            //0x07	Unknown	
            //0x08	Audio Data	packet containing audio
            //0x09	Video Data	packet containing video data
            //0x0A-0x0E	Unknown	
            //0x0F	FLEX_STREAM_SEND	TYPE_FLEX_STREAM_SEND
            //0x10	FLEX_SHARED_OBJECT	TYPE_FLEX_SHARED_OBJECT
            //0x11	FLEX_MESSAGE	TYPE_FLEX_MESSAGE
            //0x12	Notify	an invoke which does not expect a reply
            //0x13	Shared Object	has subtypes
            //0x14	Invoke	like remoting call, used for stream actions too.
            //0x16	StreamData	这是FMS3出来后新增的数据类型,这种类型数据中包含AudioData和VideoData
	    //
            //0x3 This specifies the content type of the RTMP packet is the number of bytes read. This is used to start the RTMP connection.
            //0x4 This specifies the content type of the RTMP message is a ping packet.
            //0x5 This specifies the content type of the RTMP message is server response of some type.
            //0x6 This specifies the content type of the RTMP packet is client request of some type.
            //0x8 This specifies the content type of the RTMP packet is an audio message.
            //0x9 This specifies the content type of the RTMP message is a video packet.
            //0x12 This specifies the content type of the RTMP message is notify.
            //0x13 This specifies the content type of the RTMP message is shared object.
            //0x14 This specifies the content type of the RTMP message is remote procedure call. This invokes the method of a Flash class remotely.


	    0x00, 0x00, 0x00, 0x00, 
	    //StreamID
	*/
	
	    0x02, 
	    0x00, 0x07, 
	    0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 
	    //connect
	    //
	    //see Page 45
	    //
	    //Transaction ID 
	    //	String 
	    //	Always set to 1.                      | 
	    //Command Object 
	    //	Object 
	    //	Command information object which has the name-value pairs.                 | 
	    //Optional User Arguements
	    // 	Object  
	    //	Any optional information
	    
	    0x00, 
	    0x3F, (byte) 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    //(Number) 1.0
	    
	    0x03,
	    //object-marker
	    
	    0x00, 0x03, 
	    0x61, 0x70, 0x70,  
	    //app
	    0x02, 
	    0x00, 0x08, 
	    0x53, 0x4F, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 
	    //SOSample
	    
	    
	    0x00, 0x08, 
	    0x66, 0x6C, 0x61, 0x73, 0x68, 0x56, 0x65, 0x72, 
	    //flashVer
	    0x02, 
	    0x00, 0x0E, 
	    0x57, 0x49, 0x4E, 0x20, 0x31, 0x30, 0x2C, 0x32, 0x2C, 0x31, 0x35, 0x39, 0x2C, 0x31, 
	    //WIN 10,2,159,1
	    
	    0x00, 0x06, 
	    0x73, 0x77, 0x66, 0x55, 0x72, 0x6C,  
	    //swfURL
	    0x06, 
	    //undefined
	    
	    0x00, 0x05, 
	    0x74, 0x63, 0x55, 0x72, 0x6C, 
	    //tcUrl
	    0x02, 
	    0x00, 0x19, 
	    0x72, 0x74, 0x6D, 0x70, 0x3A, 0x2F, 0x2F, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 
	    0x2F, 0x53, 0x4F, 0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 
	    //rtmp://localhost/SOSample
	    
	    0x00, 0x04, 
	    0x66, 0x70, 0x61, 0x64, 
	    //fpad
	    0x01, 
	    0x00, 
	    //false
	    
	    0x00, 0x0C, 
	    0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6C, 0x69, 0x74, 0x69, 0x65, 
	    //FIXME:
	    //(byte) 0xC3, //超过了128字节的分割包
	    0x73, 
	    //capabilities
	    0x00, 
	    0x40, 0x6D, (byte) 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
	    //(Number) 239.0
	    
	    0x00, 0x0B, 
	    0x61, 0x75, 0x64, 0x69, 0x6F, 0x43, 0x6F, 0x64, 0x65, 0x63, 0x73, 
	    //audioCodec
	    0x00, 
	    0x40, (byte) 0xA8, (byte) 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 
	    //(Number) 3191.0
	    
	    0x00, 0x0B,
	    0x76, 0x69, 0x64, 0x65, 0x6F, 0x43, 0x6F, 0x64, 0x65, 0x63, 0x73, 
	    //videoCodecs
	    0x00, 
	    0x40, 0x6F, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	    //(Number) 252.0
	    
	    0x00, 0x0D, 
	    0x76, 0x69, 0x64, 0x65, 0x6F, 0x46, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 
	    //videoFunction
	    0x00, 
	    0x3F, (byte) 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	    //(Number) 1.0
	    
	    0x00, 0x07, 
	    0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6C,
	    //pageUrl
	    0x06, 
	    //undefined
	    
	    0x00, 0x00,
	    //空的UTF-8字符串
	    0x09, 
	    //object-end-marker
	    
	    0x00, 
	    0x40, (byte) 0xDC, 0x4D, (byte) 0xC0, 0x00, 0x00, 0x00, 0x00,
	    //(Number) 28983.0
	    

五、使用Adobe的开源项目BlazeDS提供的AMF0解码类解码代码
http://opensource.adobe.com/wiki/display/blazeds/BlazeDS
这里是直接抽取出Object对象，然后打印出字符串。
    public static void test2() throws ClassNotFoundException, IOException {
	SerializationContext context = new SerializationContext();
	Amf0Input amf0in = new Amf0Input(context);
	amf0in.setInputStream(new ByteArrayInputStream(head2));
	while(amf0in.available() > 0) {
	    //System.out.println("available:" + amf0in.available());
	    Object message = amf0in.readObject();
	    System.out.println(message);
	}
    }

六、AMF0手工解码参考
注意，这里是上面AMF0数据的解码结果。
AMF0每个标签占一个字节：
    number-marker  = 0x00   
    boolean-marker  = 0x01   
    string-marker  = 0x02   
    object-marker  = 0x03   
    movieclip-marker  = 0x04  ; reserved, not supported 
    null-marker  = 0x05   
    undefined-marker  = 0x06   
    reference-marker  = 0x07   
    ecma-array-marker  = 0x08   
    object-end-marker  = 0x09   
    strict-array-marker  = 0x0A   
    date-marker  = 0x0B   
    long-string-marker  = 0x0C   
    unsupported-marker  = 0x0D   
    recordset-marker  = 0x0E  ; reserved, not supported 
    xml-document-marker  = 0x0F   
    typed-object-marker  = 0x10   

AMF0解包结果：(含义见Page 46)
    connect
    1.0
    ASObject(2208288){
    	app=SOSample, 
    	fpad=false, 
    	flashVer=WIN 10,2,159,1, 
    	tcUrl=rtmp://localhost/SOSample, 
    	audioCodecs=3191.0, 
    	videoFunction=1.0, 
    	pageUrl=null, 
    	capabilities=239.0, 
    	swfUrl=null, 
    	videoCodecs=252.0
    }
    28983.0
    这里遗漏objectEncoding（见Page46）用于指定AMF格式
    
七、AMF0/AMF3和RTMP的官方规范书。
见英文wiki介绍。
http://en.wikipedia.org/wiki/Real_Time_Messaging_Protocol
Adobe官方早已公开了RTMP和AMF的协议内容（虽然有些关键内容没有完全公开）。
其中提到的RTMP规范下载在
http://www.adobe.com/devnet/rtmp.html
AMF介绍
http://en.wikipedia.org/wiki/Action_Message_Format
其中也提到AMF0和AMF3规范的下载（见底部）
http://opensource.adobe.com/wiki/display/blazeds/Java+AMF+Client

八、测试用AS3代码。
可参考Red5安装包内的echo_test例子，
http://code.google.com/p/red5/
那个例子可以测试AMF0和AMF3在传输不同内容时的情况。
可以用嗅探器拦截发包。
代码如下。
这里是通过点击鼠标，
使用RTMP协议发送AMF0封包的Object对象：
{a: "foo", b: "bar"}

package  
{
	import flash.display.Sprite;
	import flash.events.SecurityErrorEvent;
	import flash.events.NetStatusEvent;
	import flash.net.NetConnection;
	import flash.net.Responder;
	import flash.text.TextField;
	import flash.text.TextFieldAutoSize;
	import flash.events.MouseEvent;
	import flash.net.ObjectEncoding;
	
	public class TestRTMPEcho extends Sprite
	{
		private var txt:TextField = new TextField;
		private var cn:NetConnection;
		
		public function TestRTMPEcho() 
		{
			txt.autoSize = TextFieldAutoSize.LEFT;
			addChild(txt);
			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
			log("点击鼠标开始");
		}
		
		private function onMouseDown(e:MouseEvent):void 
		{
			txt.text = "";
			log("初始化...");
			cn = new NetConnection();
			cn.objectEncoding = ObjectEncoding.AMF0;
			cn.connect("rtmp:/127.0.0.1/echo");
			cn.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			cn.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
		}
		
		private function netStatusHandler(event:NetStatusEvent):void 
		{
			switch (event.info.code) 
			{
				case "NetConnection.Connect.Success":
					log("连接成功!");
					cn.call("echo", new Responder(result, status), {a: "foo", b: "bar"});
					break;
					
				case "NetConnection.Connect.Closed":
					log("关闭连接");
					break;
				
				case "NetConnection.Connect.Failed":
					log("连接失败!");
					break;
				
				case "NetStream.Play.StreamNotFound":
					log("无法找到远程主机");
					break;
			}
		}
		
		private function result(e:Object):void
		{
			log("result");
			for (var key:String in e)
			{
				log("\t" + key + "=>" + e[key]);
			}
			cn.close();
		}
		
		private function status(e:Object):void
		{
			log("status");
			log(e.description);
			cn.close();
		}
		
		private function securityErrorHandler(event:SecurityErrorEvent):void 
		{
			txt.appendText("securityError: " + event);
		}
		
		private function log(text:String):void 
		{
			txt.appendText(text + "\n");
		}
	}
}










